                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Timer0
                                     12 	.globl _main
                                     13 	.globl _DrawFood
                                     14 	.globl _CreateFood
                                     15 	.globl _DrawSnake
                                     16 	.globl _MoveSnake
                                     17 	.globl _InitSnake
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _FL
                                     25 	.globl _P
                                     26 	.globl _TF2
                                     27 	.globl _EXF2
                                     28 	.globl _RCLK
                                     29 	.globl _TCLK
                                     30 	.globl _EXEN2
                                     31 	.globl _TR2
                                     32 	.globl _C_T2
                                     33 	.globl _CP_RL2
                                     34 	.globl _T2CON_7
                                     35 	.globl _T2CON_6
                                     36 	.globl _T2CON_5
                                     37 	.globl _T2CON_4
                                     38 	.globl _T2CON_3
                                     39 	.globl _T2CON_2
                                     40 	.globl _T2CON_1
                                     41 	.globl _T2CON_0
                                     42 	.globl _PT2
                                     43 	.globl _PS
                                     44 	.globl _PT1
                                     45 	.globl _PX1
                                     46 	.globl _PT0
                                     47 	.globl _PX0
                                     48 	.globl _RD
                                     49 	.globl _WR
                                     50 	.globl _T1
                                     51 	.globl _T0
                                     52 	.globl _INT1
                                     53 	.globl _INT0
                                     54 	.globl _TXD
                                     55 	.globl _RXD
                                     56 	.globl _P3_7
                                     57 	.globl _P3_6
                                     58 	.globl _P3_5
                                     59 	.globl _P3_4
                                     60 	.globl _P3_3
                                     61 	.globl _P3_2
                                     62 	.globl _P3_1
                                     63 	.globl _P3_0
                                     64 	.globl _EA
                                     65 	.globl _ET2
                                     66 	.globl _ES
                                     67 	.globl _ET1
                                     68 	.globl _EX1
                                     69 	.globl _ET0
                                     70 	.globl _EX0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _SM0
                                     80 	.globl _SM1
                                     81 	.globl _SM2
                                     82 	.globl _REN
                                     83 	.globl _TB8
                                     84 	.globl _RB8
                                     85 	.globl _TI
                                     86 	.globl _RI
                                     87 	.globl _T2EX
                                     88 	.globl _T2
                                     89 	.globl _P1_7
                                     90 	.globl _P1_6
                                     91 	.globl _P1_5
                                     92 	.globl _P1_4
                                     93 	.globl _P1_3
                                     94 	.globl _P1_2
                                     95 	.globl _P1_1
                                     96 	.globl _P1_0
                                     97 	.globl _TF1
                                     98 	.globl _TR1
                                     99 	.globl _TF0
                                    100 	.globl _TR0
                                    101 	.globl _IE1
                                    102 	.globl _IT1
                                    103 	.globl _IE0
                                    104 	.globl _IT0
                                    105 	.globl _P0_7
                                    106 	.globl _P0_6
                                    107 	.globl _P0_5
                                    108 	.globl _P0_4
                                    109 	.globl _P0_3
                                    110 	.globl _P0_2
                                    111 	.globl _P0_1
                                    112 	.globl _P0_0
                                    113 	.globl _B
                                    114 	.globl _A
                                    115 	.globl _ACC
                                    116 	.globl _PSW
                                    117 	.globl _TH2
                                    118 	.globl _TL2
                                    119 	.globl _RCAP2H
                                    120 	.globl _RCAP2L
                                    121 	.globl _T2MOD
                                    122 	.globl _T2CON
                                    123 	.globl _IP
                                    124 	.globl _P3
                                    125 	.globl _IE
                                    126 	.globl _P2
                                    127 	.globl _SBUF
                                    128 	.globl _SCON
                                    129 	.globl _P1
                                    130 	.globl _TH1
                                    131 	.globl _TH0
                                    132 	.globl _TL1
                                    133 	.globl _TL0
                                    134 	.globl _TMOD
                                    135 	.globl _TCON
                                    136 	.globl _PCON
                                    137 	.globl _DPH
                                    138 	.globl _DPL
                                    139 	.globl _SP
                                    140 	.globl _P0
                                    141 	.globl _Init
                                    142 	.globl _KeyPros
                                    143 	.globl _InitTimer0
                                    144 	.globl _Display
                                    145 	.globl _Clr
                                    146 	.globl _Draw
                                    147 	.globl _HC595SendByte
                                    148 	.globl _delay
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 ;--------------------------------------------------------
                                    288 ; overlayable bit register bank
                                    289 ;--------------------------------------------------------
                                    290 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        291 bits:
      000000                        292 	.ds 1
                           008000   293 	b0 = bits[0]
                           008100   294 	b1 = bits[1]
                           008200   295 	b2 = bits[2]
                           008300   296 	b3 = bits[3]
                           008400   297 	b4 = bits[4]
                           008500   298 	b5 = bits[5]
                           008600   299 	b6 = bits[6]
                           008700   300 	b7 = bits[7]
                                    301 ;--------------------------------------------------------
                                    302 ; internal ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area DSEG    (DATA)
      000000                        305 _line:
      000000                        306 	.ds 8
      000008                        307 _direct:
      000008                        308 	.ds 1
      000009                        309 _Timer0_count_1_17:
      000009                        310 	.ds 2
                                    311 ;--------------------------------------------------------
                                    312 ; overlayable items in internal ram 
                                    313 ;--------------------------------------------------------
                                    314 	.area	OSEG    (OVR,DATA)
                                    315 	.area	OSEG    (OVR,DATA)
                                    316 	.area	OSEG    (OVR,DATA)
                                    317 ;--------------------------------------------------------
                                    318 ; Stack segment in internal ram 
                                    319 ;--------------------------------------------------------
                                    320 	.area	SSEG
      000000                        321 __start__stack:
      000000                        322 	.ds	1
                                    323 
                                    324 ;--------------------------------------------------------
                                    325 ; indirectly addressable internal ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area ISEG    (DATA)
                                    328 ;--------------------------------------------------------
                                    329 ; absolute internal ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area IABS    (ABS,DATA)
                                    332 	.area IABS    (ABS,DATA)
                                    333 ;--------------------------------------------------------
                                    334 ; bit data
                                    335 ;--------------------------------------------------------
                                    336 	.area BSEG    (BIT)
                                    337 ;--------------------------------------------------------
                                    338 ; paged external ram data
                                    339 ;--------------------------------------------------------
                                    340 	.area PSEG    (PAG,XDATA)
                                    341 ;--------------------------------------------------------
                                    342 ; external ram data
                                    343 ;--------------------------------------------------------
                                    344 	.area XSEG    (XDATA)
                                    345 ;--------------------------------------------------------
                                    346 ; absolute external ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area XABS    (ABS,XDATA)
                                    349 ;--------------------------------------------------------
                                    350 ; external initialized ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area XISEG   (XDATA)
                                    353 	.area HOME    (CODE)
                                    354 	.area GSINIT0 (CODE)
                                    355 	.area GSINIT1 (CODE)
                                    356 	.area GSINIT2 (CODE)
                                    357 	.area GSINIT3 (CODE)
                                    358 	.area GSINIT4 (CODE)
                                    359 	.area GSINIT5 (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area CSEG    (CODE)
                                    363 ;--------------------------------------------------------
                                    364 ; interrupt vector 
                                    365 ;--------------------------------------------------------
                                    366 	.area HOME    (CODE)
      000000                        367 __interrupt_vect:
      000000 02r00r00         [24]  368 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  369 	reti
      000004                        370 	.ds	7
      00000B 02r00rA3         [24]  371 	ljmp	_Timer0
                                    372 ;--------------------------------------------------------
                                    373 ; global & static initialisations
                                    374 ;--------------------------------------------------------
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT  (CODE)
                                    377 	.area GSFINAL (CODE)
                                    378 	.area GSINIT  (CODE)
                                    379 	.globl __sdcc_gsinit_startup
                                    380 	.globl __sdcc_program_startup
                                    381 	.globl __start__stack
                                    382 	.globl __mcs51_genXINIT
                                    383 	.globl __mcs51_genXRAMCLEAR
                                    384 	.globl __mcs51_genRAMCLEAR
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'Timer0'
                                    387 ;------------------------------------------------------------
                                    388 ;count                     Allocated with name '_Timer0_count_1_17'
                                    389 ;------------------------------------------------------------
                                    390 ;	main.c:119: static uint count = 0;
      000000 E4               [12]  391 	clr	a
      000001 F5*09            [12]  392 	mov	_Timer0_count_1_17,a
      000003 F5*0A            [12]  393 	mov	(_Timer0_count_1_17 + 1),a
                                    394 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  395 	ljmp	__sdcc_program_startup
                                    396 ;--------------------------------------------------------
                                    397 ; Home
                                    398 ;--------------------------------------------------------
                                    399 	.area HOME    (CODE)
                                    400 	.area HOME    (CODE)
      00000E                        401 __sdcc_program_startup:
      00000E 02r00r00         [24]  402 	ljmp	_main
                                    403 ;	return from main will return to caller
                                    404 ;--------------------------------------------------------
                                    405 ; code
                                    406 ;--------------------------------------------------------
                                    407 	.area CSEG    (CODE)
                                    408 ;------------------------------------------------------------
                                    409 ;Allocation info for local variables in function 'main'
                                    410 ;------------------------------------------------------------
                                    411 ;	main.c:37: void main()
                                    412 ;	-----------------------------------------
                                    413 ;	 function main
                                    414 ;	-----------------------------------------
      000000                        415 _main:
                           000007   416 	ar7 = 0x07
                           000006   417 	ar6 = 0x06
                           000005   418 	ar5 = 0x05
                           000004   419 	ar4 = 0x04
                           000003   420 	ar3 = 0x03
                           000002   421 	ar2 = 0x02
                           000001   422 	ar1 = 0x01
                           000000   423 	ar0 = 0x00
                                    424 ;	main.c:39: Init();
      000000 12r00r0B         [24]  425 	lcall	_Init
      000003                        426 00102$:
                                    427 ;	main.c:41: Display();
      000003 12r01r11         [24]  428 	lcall	_Display
                                    429 ;	main.c:42: KeyPros();
      000006 12r00r26         [24]  430 	lcall	_KeyPros
      000009 80 F8            [24]  431 	sjmp	00102$
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'Init'
                                    434 ;------------------------------------------------------------
                                    435 ;	main.c:46: void Init()
                                    436 ;	-----------------------------------------
                                    437 ;	 function Init
                                    438 ;	-----------------------------------------
      00000B                        439 _Init:
                                    440 ;	main.c:48: InitTimer0();
      00000B 12r00r93         [24]  441 	lcall	_InitTimer0
                                    442 ;	main.c:49: InitSnake();
      00000E 12r00r00         [24]  443 	lcall	_InitSnake
                                    444 ;	main.c:50: CreateFood();
      000011 12r00r00         [24]  445 	lcall	_CreateFood
                                    446 ;	main.c:51: direct = UP;
      000014 75*08 0A         [24]  447 	mov	_direct,#0x0a
                                    448 ;	main.c:52: DrawSnake(Draw);
      000017 90r01r64         [24]  449 	mov	dptr,#_Draw
      00001A 12r00r00         [24]  450 	lcall	_DrawSnake
                                    451 ;	main.c:53: DrawFood(Draw);
      00001D 90r01r64         [24]  452 	mov	dptr,#_Draw
      000020 12r00r00         [24]  453 	lcall	_DrawFood
                                    454 ;	main.c:54: led = 1;
      000023 D2 A0            [12]  455 	setb	_P2_0
      000025 22               [24]  456 	ret
                                    457 ;------------------------------------------------------------
                                    458 ;Allocation info for local variables in function 'KeyPros'
                                    459 ;------------------------------------------------------------
                                    460 ;keyValue                  Allocated to registers r7 
                                    461 ;------------------------------------------------------------
                                    462 ;	main.c:57: void KeyPros()
                                    463 ;	-----------------------------------------
                                    464 ;	 function KeyPros
                                    465 ;	-----------------------------------------
      000026                        466 _KeyPros:
                                    467 ;	main.c:59: uchar keyValue = 1;
      000026 7F 01            [12]  468 	mov	r7,#0x01
                                    469 ;	main.c:61: key = 0x0f;
                                    470 ;	main.c:62: if (key != 0x0f) {
      000028 74 0F            [12]  471 	mov	a,#0x0f
      00002A F5 90            [12]  472 	mov	_P1,a
      00002C B5 90 01         [24]  473 	cjne	a,_P1,00149$
      00002F 22               [24]  474 	ret
      000030                        475 00149$:
                                    476 ;	main.c:63: delay(1000);
      000030 75 82 E8         [24]  477 	mov	dpl,#0xe8
      000033 C0 07            [24]  478 	push	ar7
      000035 12r01rB1         [24]  479 	lcall	_delay
      000038 D0 07            [24]  480 	pop	ar7
                                    481 ;	main.c:64: if (key != 0x0f) {
      00003A 74 0F            [12]  482 	mov	a,#0x0f
      00003C B5 90 01         [24]  483 	cjne	a,_P1,00150$
      00003F 22               [24]  484 	ret
      000040                        485 00150$:
                                    486 ;	main.c:65: key = 0x0f;
      000040 75 90 0F         [24]  487 	mov	_P1,#0x0f
                                    488 ;	main.c:66: switch (key) {
      000043 AE 90            [24]  489 	mov	r6,_P1
      000045 BE 07 02         [24]  490 	cjne	r6,#0x07,00151$
      000048 80 0F            [24]  491 	sjmp	00101$
      00004A                        492 00151$:
      00004A BE 0B 02         [24]  493 	cjne	r6,#0x0b,00152$
      00004D 80 0E            [24]  494 	sjmp	00102$
      00004F                        495 00152$:
      00004F BE 0D 02         [24]  496 	cjne	r6,#0x0d,00153$
      000052 80 0D            [24]  497 	sjmp	00103$
      000054                        498 00153$:
                                    499 ;	main.c:67: case 0x07:
      000054 BE 0E 10         [24]  500 	cjne	r6,#0x0e,00106$
      000057 80 0C            [24]  501 	sjmp	00104$
      000059                        502 00101$:
                                    503 ;	main.c:68: keyValue = 0;
      000059 7F 00            [12]  504 	mov	r7,#0x00
                                    505 ;	main.c:69: break;
                                    506 ;	main.c:70: case 0x0b:
      00005B 80 0A            [24]  507 	sjmp	00106$
      00005D                        508 00102$:
                                    509 ;	main.c:71: keyValue = 1;
      00005D 7F 01            [12]  510 	mov	r7,#0x01
                                    511 ;	main.c:72: break;
                                    512 ;	main.c:73: case 0x0d:
      00005F 80 06            [24]  513 	sjmp	00106$
      000061                        514 00103$:
                                    515 ;	main.c:74: keyValue = 2;
      000061 7F 02            [12]  516 	mov	r7,#0x02
                                    517 ;	main.c:75: break;
                                    518 ;	main.c:76: case 0x0e:
      000063 80 02            [24]  519 	sjmp	00106$
      000065                        520 00104$:
                                    521 ;	main.c:77: keyValue = 3;
      000065 7F 03            [12]  522 	mov	r7,#0x03
                                    523 ;	main.c:81: }
      000067                        524 00106$:
                                    525 ;	main.c:83: key = 0xf0;
      000067 75 90 F0         [24]  526 	mov	_P1,#0xf0
                                    527 ;	main.c:84: switch (key) {
      00006A AE 90            [24]  528 	mov	r6,_P1
      00006C BE 70 02         [24]  529 	cjne	r6,#0x70,00155$
      00006F 80 1F            [24]  530 	sjmp	00112$
      000071                        531 00155$:
      000071 BE B0 02         [24]  532 	cjne	r6,#0xb0,00156$
      000074 80 0A            [24]  533 	sjmp	00108$
      000076                        534 00156$:
      000076 BE D0 02         [24]  535 	cjne	r6,#0xd0,00157$
      000079 80 0B            [24]  536 	sjmp	00109$
      00007B                        537 00157$:
                                    538 ;	main.c:88: case 0xb0:
      00007B BE E0 12         [24]  539 	cjne	r6,#0xe0,00112$
      00007E 80 0C            [24]  540 	sjmp	00110$
      000080                        541 00108$:
                                    542 ;	main.c:89: keyValue += 4;
      000080 EF               [12]  543 	mov	a,r7
      000081 24 04            [12]  544 	add	a,#0x04
      000083 FF               [12]  545 	mov	r7,a
                                    546 ;	main.c:90: break;
                                    547 ;	main.c:91: case 0xd0:
      000084 80 0A            [24]  548 	sjmp	00112$
      000086                        549 00109$:
                                    550 ;	main.c:92: keyValue += 8;
      000086 74 08            [12]  551 	mov	a,#0x08
      000088 2F               [12]  552 	add	a,r7
      000089 FF               [12]  553 	mov	r7,a
                                    554 ;	main.c:93: break;
                                    555 ;	main.c:94: case 0xe0:
      00008A 80 04            [24]  556 	sjmp	00112$
      00008C                        557 00110$:
                                    558 ;	main.c:95: keyValue += 12;
      00008C 74 0C            [12]  559 	mov	a,#0x0c
      00008E 2F               [12]  560 	add	a,r7
      00008F FF               [12]  561 	mov	r7,a
                                    562 ;	main.c:99: }
      000090                        563 00112$:
                                    564 ;	main.c:101: direct = keyValue;
      000090 8F*08            [24]  565 	mov	_direct,r7
      000092 22               [24]  566 	ret
                                    567 ;------------------------------------------------------------
                                    568 ;Allocation info for local variables in function 'InitTimer0'
                                    569 ;------------------------------------------------------------
                                    570 ;	main.c:106: void InitTimer0()
                                    571 ;	-----------------------------------------
                                    572 ;	 function InitTimer0
                                    573 ;	-----------------------------------------
      000093                        574 _InitTimer0:
                                    575 ;	main.c:108: TMOD = 0x01;
      000093 75 89 01         [24]  576 	mov	_TMOD,#0x01
                                    577 ;	main.c:110: EA  = 1;
      000096 D2 AF            [12]  578 	setb	_EA
                                    579 ;	main.c:111: ET0 = 1;
      000098 D2 A9            [12]  580 	setb	_ET0
                                    581 ;	main.c:112: TH0 = 0XFC;
      00009A 75 8C FC         [24]  582 	mov	_TH0,#0xfc
                                    583 ;	main.c:113: TL0 = 0X18;
      00009D 75 8A 18         [24]  584 	mov	_TL0,#0x18
                                    585 ;	main.c:114: TR0 = 1;
      0000A0 D2 8C            [12]  586 	setb	_TR0
      0000A2 22               [24]  587 	ret
                                    588 ;------------------------------------------------------------
                                    589 ;Allocation info for local variables in function 'Timer0'
                                    590 ;------------------------------------------------------------
                                    591 ;count                     Allocated with name '_Timer0_count_1_17'
                                    592 ;------------------------------------------------------------
                                    593 ;	main.c:117: void Timer0() __interrupt 1
                                    594 ;	-----------------------------------------
                                    595 ;	 function Timer0
                                    596 ;	-----------------------------------------
      0000A3                        597 _Timer0:
      0000A3 C0*00            [24]  598 	push	bits
      0000A5 C0 E0            [24]  599 	push	acc
      0000A7 C0 F0            [24]  600 	push	b
      0000A9 C0 82            [24]  601 	push	dpl
      0000AB C0 83            [24]  602 	push	dph
      0000AD C0 07            [24]  603 	push	(0+7)
      0000AF C0 06            [24]  604 	push	(0+6)
      0000B1 C0 05            [24]  605 	push	(0+5)
      0000B3 C0 04            [24]  606 	push	(0+4)
      0000B5 C0 03            [24]  607 	push	(0+3)
      0000B7 C0 02            [24]  608 	push	(0+2)
      0000B9 C0 01            [24]  609 	push	(0+1)
      0000BB C0 00            [24]  610 	push	(0+0)
      0000BD C0 D0            [24]  611 	push	psw
      0000BF 75 D0 00         [24]  612 	mov	psw,#0x00
                                    613 ;	main.c:121: TH0 = 0XFC;
      0000C2 75 8C FC         [24]  614 	mov	_TH0,#0xfc
                                    615 ;	main.c:122: TL0 = 0X18;
      0000C5 75 8A 18         [24]  616 	mov	_TL0,#0x18
                                    617 ;	main.c:124: if (count++ == 600) {
      0000C8 AE*09            [24]  618 	mov	r6,_Timer0_count_1_17
      0000CA AF*0A            [24]  619 	mov	r7,(_Timer0_count_1_17 + 1)
      0000CC 05*09            [12]  620 	inc	_Timer0_count_1_17
      0000CE E4               [12]  621 	clr	a
      0000CF B5*09 02         [24]  622 	cjne	a,_Timer0_count_1_17,00108$
      0000D2 05*0A            [12]  623 	inc	(_Timer0_count_1_17 + 1)
      0000D4                        624 00108$:
      0000D4 BE 58 1D         [24]  625 	cjne	r6,#0x58,00103$
      0000D7 BF 02 1A         [24]  626 	cjne	r7,#0x02,00103$
                                    627 ;	main.c:125: count = 0;
      0000DA E4               [12]  628 	clr	a
      0000DB F5*09            [12]  629 	mov	_Timer0_count_1_17,a
      0000DD F5*0A            [12]  630 	mov	(_Timer0_count_1_17 + 1),a
                                    631 ;	main.c:127: MoveSnake(direct);
      0000DF 85*08 82         [24]  632 	mov	dpl,_direct
      0000E2 12r00r00         [24]  633 	lcall	_MoveSnake
                                    634 ;	main.c:129: Clr();
      0000E5 12r01r55         [24]  635 	lcall	_Clr
                                    636 ;	main.c:130: DrawSnake(Draw);
      0000E8 90r01r64         [24]  637 	mov	dptr,#_Draw
      0000EB 12r00r00         [24]  638 	lcall	_DrawSnake
                                    639 ;	main.c:131: DrawFood(Draw);
      0000EE 90r01r64         [24]  640 	mov	dptr,#_Draw
      0000F1 12r00r00         [24]  641 	lcall	_DrawFood
      0000F4                        642 00103$:
      0000F4 D0 D0            [24]  643 	pop	psw
      0000F6 D0 00            [24]  644 	pop	(0+0)
      0000F8 D0 01            [24]  645 	pop	(0+1)
      0000FA D0 02            [24]  646 	pop	(0+2)
      0000FC D0 03            [24]  647 	pop	(0+3)
      0000FE D0 04            [24]  648 	pop	(0+4)
      000100 D0 05            [24]  649 	pop	(0+5)
      000102 D0 06            [24]  650 	pop	(0+6)
      000104 D0 07            [24]  651 	pop	(0+7)
      000106 D0 83            [24]  652 	pop	dph
      000108 D0 82            [24]  653 	pop	dpl
      00010A D0 F0            [24]  654 	pop	b
      00010C D0 E0            [24]  655 	pop	acc
      00010E D0*00            [24]  656 	pop	bits
      000110 32               [24]  657 	reti
                                    658 ;------------------------------------------------------------
                                    659 ;Allocation info for local variables in function 'Display'
                                    660 ;------------------------------------------------------------
                                    661 ;i                         Allocated to registers r7 
                                    662 ;tmp                       Allocated to registers 
                                    663 ;------------------------------------------------------------
                                    664 ;	main.c:135: void Display()
                                    665 ;	-----------------------------------------
                                    666 ;	 function Display
                                    667 ;	-----------------------------------------
      000111                        668 _Display:
                                    669 ;	main.c:141: for (i = 0; i < 8; i++) {
      000111 7F 00            [12]  670 	mov	r7,#0x00
      000113                        671 00102$:
                                    672 ;	main.c:142: mat = _cror_(tmp, i);
      000113 8F F0            [24]  673 	mov	b,r7
      000115 05 F0            [12]  674 	inc	b
      000117 74 7F            [12]  675 	mov	a,#0x7f
      000119 80 02            [24]  676 	sjmp	00111$
      00011B                        677 00110$:
      00011B C3               [12]  678 	clr	c
      00011C 13               [12]  679 	rrc	a
      00011D                        680 00111$:
      00011D D5 F0 FB         [24]  681 	djnz	b,00110$
      000120 FE               [12]  682 	mov	r6,a
      000121 74 08            [12]  683 	mov	a,#0x08
      000123 C3               [12]  684 	clr	c
      000124 9F               [12]  685 	subb	a,r7
      000125 F5 F0            [12]  686 	mov	b,a
      000127 05 F0            [12]  687 	inc	b
      000129 74 7F            [12]  688 	mov	a,#0x7f
      00012B 80 02            [24]  689 	sjmp	00114$
      00012D                        690 00112$:
      00012D 25 E0            [12]  691 	add	a,acc
      00012F                        692 00114$:
      00012F D5 F0 FB         [24]  693 	djnz	b,00112$
      000132 4E               [12]  694 	orl	a,r6
      000133 F5 80            [12]  695 	mov	_P0,a
                                    696 ;	main.c:143: HC595SendByte(line[i]);
      000135 EF               [12]  697 	mov	a,r7
      000136 24r00            [12]  698 	add	a,#_line
      000138 F9               [12]  699 	mov	r1,a
      000139 87 82            [24]  700 	mov	dpl,@r1
      00013B C0 07            [24]  701 	push	ar7
      00013D 12r01r8A         [24]  702 	lcall	_HC595SendByte
                                    703 ;	main.c:144: delay(100);
      000140 75 82 64         [24]  704 	mov	dpl,#0x64
      000143 12r01rB1         [24]  705 	lcall	_delay
                                    706 ;	main.c:145: HC595SendByte(0x00);
      000146 75 82 00         [24]  707 	mov	dpl,#0x00
      000149 12r01r8A         [24]  708 	lcall	_HC595SendByte
      00014C D0 07            [24]  709 	pop	ar7
                                    710 ;	main.c:141: for (i = 0; i < 8; i++) {
      00014E 0F               [12]  711 	inc	r7
      00014F BF 08 00         [24]  712 	cjne	r7,#0x08,00115$
      000152                        713 00115$:
      000152 40 BF            [24]  714 	jc	00102$
      000154 22               [24]  715 	ret
                                    716 ;------------------------------------------------------------
                                    717 ;Allocation info for local variables in function 'Clr'
                                    718 ;------------------------------------------------------------
                                    719 ;i                         Allocated to registers r7 
                                    720 ;------------------------------------------------------------
                                    721 ;	main.c:149: void Clr()
                                    722 ;	-----------------------------------------
                                    723 ;	 function Clr
                                    724 ;	-----------------------------------------
      000155                        725 _Clr:
                                    726 ;	main.c:152: for (i = 0; i < 8; i++) {
      000155 7F 00            [12]  727 	mov	r7,#0x00
      000157                        728 00102$:
                                    729 ;	main.c:153: line[i] = 0x00;
      000157 EF               [12]  730 	mov	a,r7
      000158 24r00            [12]  731 	add	a,#_line
      00015A F8               [12]  732 	mov	r0,a
      00015B 76 00            [12]  733 	mov	@r0,#0x00
                                    734 ;	main.c:152: for (i = 0; i < 8; i++) {
      00015D 0F               [12]  735 	inc	r7
      00015E BF 08 00         [24]  736 	cjne	r7,#0x08,00110$
      000161                        737 00110$:
      000161 40 F4            [24]  738 	jc	00102$
      000163 22               [24]  739 	ret
                                    740 ;------------------------------------------------------------
                                    741 ;Allocation info for local variables in function 'Draw'
                                    742 ;------------------------------------------------------------
                                    743 ;y                         Allocated to stack - _bp -3
                                    744 ;x                         Allocated to registers r7 
                                    745 ;tmp                       Allocated to registers r6 
                                    746 ;------------------------------------------------------------
                                    747 ;	main.c:157: void Draw(uchar x, uchar y) __reentrant
                                    748 ;	-----------------------------------------
                                    749 ;	 function Draw
                                    750 ;	-----------------------------------------
      000164                        751 _Draw:
      000164 C0*00            [24]  752 	push	_bp
      000166 85 81*00         [24]  753 	mov	_bp,sp
      000169 AF 82            [24]  754 	mov	r7,dpl
                                    755 ;	main.c:160: tmp <<= y;
      00016B E5*00            [12]  756 	mov	a,_bp
      00016D 24 FD            [12]  757 	add	a,#0xfd
      00016F F8               [12]  758 	mov	r0,a
      000170 86 F0            [24]  759 	mov	b,@r0
      000172 05 F0            [12]  760 	inc	b
      000174 74 01            [12]  761 	mov	a,#0x01
      000176 80 02            [24]  762 	sjmp	00105$
      000178                        763 00103$:
      000178 25 E0            [12]  764 	add	a,acc
      00017A                        765 00105$:
      00017A D5 F0 FB         [24]  766 	djnz	b,00103$
      00017D FE               [12]  767 	mov	r6,a
                                    768 ;	main.c:161: line[x] |= tmp;
      00017E EF               [12]  769 	mov	a,r7
      00017F 24r00            [12]  770 	add	a,#_line
      000181 F9               [12]  771 	mov	r1,a
      000182 87 07            [24]  772 	mov	ar7,@r1
      000184 EE               [12]  773 	mov	a,r6
      000185 4F               [12]  774 	orl	a,r7
      000186 F7               [12]  775 	mov	@r1,a
      000187 D0*00            [24]  776 	pop	_bp
      000189 22               [24]  777 	ret
                                    778 ;------------------------------------------------------------
                                    779 ;Allocation info for local variables in function 'HC595SendByte'
                                    780 ;------------------------------------------------------------
                                    781 ;dat                       Allocated to registers r7 
                                    782 ;i                         Allocated to registers r6 
                                    783 ;------------------------------------------------------------
                                    784 ;	main.c:164: void HC595SendByte(uchar dat)
                                    785 ;	-----------------------------------------
                                    786 ;	 function HC595SendByte
                                    787 ;	-----------------------------------------
      00018A                        788 _HC595SendByte:
      00018A AF 82            [24]  789 	mov	r7,dpl
                                    790 ;	main.c:168: HC595_SHCP = 0;
      00018C C2 B6            [12]  791 	clr	_P3_6
                                    792 ;	main.c:169: HC595_STCP = 0;
      00018E C2 B5            [12]  793 	clr	_P3_5
                                    794 ;	main.c:170: for (i = 0; i < 8; i++) {
      000190 7E 00            [12]  795 	mov	r6,#0x00
      000192                        796 00102$:
                                    797 ;	main.c:171: HC595_DS = dat >> 7;
      000192 EF               [12]  798 	mov	a,r7
      000193 23               [12]  799 	rl	a
      000194 54 01            [12]  800 	anl	a,#0x01
      000196 FD               [12]  801 	mov	r5,a
      000197 24 FF            [12]  802 	add	a,#0xff
      000199 92 B4            [24]  803 	mov	_P3_4,c
                                    804 ;	main.c:172: dat <<= 1;
      00019B EF               [12]  805 	mov	a,r7
      00019C 2F               [12]  806 	add	a,r7
      00019D FF               [12]  807 	mov	r7,a
                                    808 ;	main.c:173: HC595_SHCP = 1;
      00019E D2 B6            [12]  809 	setb	_P3_6
                                    810 ;	main.c:174: _nop_();
      0001A0 00               [12]  811 	NOP	
                                    812 ;	main.c:175: _nop_();
      0001A1 00               [12]  813 	NOP	
                                    814 ;	main.c:176: HC595_SHCP = 0;
      0001A2 C2 B6            [12]  815 	clr	_P3_6
                                    816 ;	main.c:170: for (i = 0; i < 8; i++) {
      0001A4 0E               [12]  817 	inc	r6
      0001A5 BE 08 00         [24]  818 	cjne	r6,#0x08,00113$
      0001A8                        819 00113$:
      0001A8 40 E8            [24]  820 	jc	00102$
                                    821 ;	main.c:178: HC595_STCP = 1;
      0001AA D2 B5            [12]  822 	setb	_P3_5
                                    823 ;	main.c:179: _nop_();
      0001AC 00               [12]  824 	NOP	
                                    825 ;	main.c:180: _nop_();
      0001AD 00               [12]  826 	NOP	
                                    827 ;	main.c:181: HC595_STCP = 0;
      0001AE C2 B5            [12]  828 	clr	_P3_5
      0001B0 22               [24]  829 	ret
                                    830 ;------------------------------------------------------------
                                    831 ;Allocation info for local variables in function 'delay'
                                    832 ;------------------------------------------------------------
                                    833 ;i                         Allocated to registers 
                                    834 ;------------------------------------------------------------
                                    835 ;	main.c:184: void delay(uchar i)
                                    836 ;	-----------------------------------------
                                    837 ;	 function delay
                                    838 ;	-----------------------------------------
      0001B1                        839 _delay:
      0001B1 AF 82            [24]  840 	mov	r7,dpl
                                    841 ;	main.c:186: while(i--);
      0001B3                        842 00101$:
      0001B3 8F 06            [24]  843 	mov	ar6,r7
      0001B5 1F               [12]  844 	dec	r7
      0001B6 EE               [12]  845 	mov	a,r6
      0001B7 70 FA            [24]  846 	jnz	00101$
      0001B9 22               [24]  847 	ret
                                    848 	.area CSEG    (CODE)
                                    849 	.area CONST   (CODE)
                                    850 	.area XINIT   (CODE)
                                    851 	.area CABS    (ABS,CODE)
